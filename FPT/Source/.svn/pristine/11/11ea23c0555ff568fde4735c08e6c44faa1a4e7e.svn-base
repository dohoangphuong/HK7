using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CSS.Models;
using CSS.ViewModels;

namespace CSS.Controllers
{
    public class AgreementController : Controller
    {
        private CSSEntities1 db = new CSSEntities1();
        //
        // GET: /Agreement/

        public ActionResult Index()
        {
            return View();
        }

        [ChildActionOnly]
        public ActionResult ParticialStatics()
        {
            if (Request.IsAuthenticated)
            {
                return View(db.AgreementStatus.ToList());
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
        
        public ActionResult Statics()
        {
            if (Request.IsAuthenticated)
            {
                List<Agreement> recentAgreement = db.Agreements.Where(x => (x.CreatedBy == @User.Identity.Name)).OrderBy(x=>x.LastUpdatedDate).Take(3).ToList() ;
                ViewBag.recentAgreement = recentAgreement;
                return View(db.AgreementStatus.ToList());
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult Statics(string Select)
        {
            if (Request.IsAuthenticated)
            {
                if (Select != null)
                {
                    string[] part = Select.Split('/');
                    return RedirectToAction("View", new { agreementNumber = part[0], variant = part[1] });
                }
                else
                {
                    return RedirectToAction("Statics");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult Copy(int agreementNumber = 0, int variant = 0)
        {
            if (Request.IsAuthenticated)
            {
                Agreement agreement = db.Agreements.Find(agreementNumber, variant);
                if (agreement == null)
                {
                    return HttpNotFound();
                }
                return View(db.Agreements.Find(agreementNumber, variant));
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult Copy(Agreement agreement, int choice)
        {
            if (Request.IsAuthenticated)
            {
                switch (choice)
                {
                    case 1:
                        agreement.VariantNumber = db.Agreements.Where(x => x.AgreementNumber == agreement.AgreementNumber).OrderBy(x => x.VariantNumber).First().VariantNumber++;
                        db.Agreements.Add(agreement);
                        return RedirectToAction("Edit", new { agreementNumber = agreement.AgreementNumber, variant = agreement.VariantNumber });
                    case 2:
                        agreement.AgreementNumber = db.Agreements.OrderBy(x => x.AgreementNumber).First().AgreementNumber++;
                        agreement.VariantNumber = 1;
                        db.Agreements.Add(agreement);
                        return RedirectToAction("Edit", new { agreementNumber = agreement.AgreementNumber, variant = agreement.VariantNumber });
                    case 3:
                        agreement.RFONumbers.Clear();
                        return RedirectToAction("Add", agreement);
                    default:
                        return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult AddAgreement()
        {
            if (Request.IsAuthenticated)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult SelectCustomer()
        {
            if (Request.IsAuthenticated)
            {
                SearchCustomer searchModel = new SearchCustomer();
                ViewBag.CustomerTypes = db.CustomerTypes.ToArray<CustomerType>();
                return PartialView("SelectCustomer", searchModel);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult SearchCustomer()
        {
            SearchCustomer searchModel = new SearchCustomer();
            if (TryUpdateModel(searchModel))
            {
                SearchCustomer[] searchResult = null;
                if (searchModel.RFONumber != null)
                {
                    var results = from rfo in db.RFONumbers.Where(r => (r.RFONumber1 == searchModel.RFONumber))
                                  join com in db.Companies
                                  on rfo.CompanyId equals com.CompanyId
                                  join csm in db.CustomerTypes
                                  on rfo.CustomerTypeId equals csm.CustomerTypeId
                                  select new SearchCustomer
                                  {
                                      RFONumber = rfo.RFONumber1,
                                      SelectedCustomerType = rfo.CustomerType,
                                      Name = com.Name,
                                      PostCode = rfo.PostCode,
                                      BusinessArea = com.BusinessArea
                                  };
                    if (results != null)
                        searchResult = results.ToArray<SearchCustomer>();
                }
                else
                {
                    var results = from rfo in db.RFONumbers.Where(r => ((searchModel.RFONumber == null || r.RFONumber1 == searchModel.RFONumber)
                                        && r.CustomerTypeId == searchModel.SelectedCustomerType.CustomerTypeId
                                        && (string.IsNullOrEmpty(searchModel.PostCode) || r.PostCode.Contains(searchModel.PostCode))))

                                  join com in db.Companies.Where(co => ((string.IsNullOrEmpty(searchModel.Name) || co.Name.Contains(searchModel.Name))
                                        && (string.IsNullOrEmpty(searchModel.BusinessArea) || co.BusinessArea.Contains(searchModel.BusinessArea))))
                                    on rfo.CompanyId equals com.CompanyId

                                  join csm in db.CustomerTypes
                                    on rfo.CustomerTypeId equals csm.CustomerTypeId
                                  select new SearchCustomer
                                  {
                                      RFONumber = rfo.RFONumber1,
                                      SelectedCustomerType = rfo.CustomerType,
                                      Name = com.Name,
                                      PostCode = rfo.PostCode,
                                      BusinessArea = com.BusinessArea
                                  };
                    if (results != null)
                        searchResult = results.ToArray<SearchCustomer>();
                }
                if (searchResult != null)
                    return PartialView("SearchCustomerResults", searchResult);
                else
                    return PartialView("SelectCustomer", new SearchCustomer[0]);
            }
            else
                return PartialView("SearchCustomerResults", new SearchCustomer[0]);
        }

        [HttpPost]
        public ActionResult CreateAgreement(int rfoNumber)
        {
            return PartialView("BasicDetails");
        }

        public ActionResult RejectAgreement()
        {
            if (Request.IsAuthenticated)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
    }
}
