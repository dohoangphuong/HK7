using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CSS.Models;
using CSS.ViewModels;

namespace CSS.Controllers
{
    public class AgreementController : Controller
    {
        private CSSEntities1 db = new CSSEntities1();
        //
        // GET: /Agreement/

        public ActionResult Index()
        {
            return View();
        }

        [ChildActionOnly]
        public ActionResult ParticialStatics()
        {
            if (Request.IsAuthenticated)
            {
                return View(db.AgreementStatus.ToList());
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
        
        public ActionResult Statics()
        {
            if (Request.IsAuthenticated)
            {
                List<Agreement> recentAgreement = db.Agreements.Where(x => (x.CreatedBy == @User.Identity.Name)).OrderBy(x=>x.LastUpdatedDate).Take(3).ToList() ;
                ViewBag.recentAgreement = recentAgreement;
                return View(db.AgreementStatus.ToList());
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult Statics(string Select)
        {
            if (Request.IsAuthenticated)
            {
                if (Select != null)
                {
                    string[] part = Select.Split('/');
                    return RedirectToAction("View", new { agreementNumber = part[0], variant = part[1] });
                }
                else
                {
                    return RedirectToAction("Statics");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult Copy(int agreementNumber = 0, int variant = 0)
        {
            if (Request.IsAuthenticated)
            {
                Agreement agreement = db.Agreements.Find(agreementNumber, variant);
                if (agreement == null)
                {
                    return HttpNotFound();
                }
                //new Variant = highest variant +1
                ViewBag.NewVariant = db.Agreements.Where(x => x.AgreementNumber == agreement.AgreementNumber).OrderByDescending(x => x.VariantNumber).First().VariantNumber + 1;
                return View(agreement);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult Copy(Agreement agreement, int choice)
        {
            if (Request.IsAuthenticated)
            {
                Agreement NewAgreement = db.Agreements.AsNoTracking().Single(x => x.AgreementNumber == agreement.AgreementNumber && x.VariantNumber == agreement.VariantNumber);
                NewAgreement.CreatedBy = User.Identity.Name;
                NewAgreement.LastUpdatedDate = DateTime.Now;
                NewAgreement.CreatedDate = DateTime.Now;
                NewAgreement.RFOUsers = db.Agreements.Find(agreement.AgreementNumber, agreement.VariantNumber).RFOUsers;
                switch (choice)
                {
                    //Duplicate this agreement with a new variant
                    case 1:
                        NewAgreement.VariantNumber = db.Agreements.Where(x => x.AgreementNumber == NewAgreement.AgreementNumber).OrderByDescending(x => x.VariantNumber).First().VariantNumber + 1; 
                        NewAgreement.RFONumbers = db.Agreements.Find(agreement.AgreementNumber, agreement.VariantNumber).RFONumbers;
                        db.Agreements.Add(NewAgreement);
                        db.SaveChanges();
                        return RedirectToAction("Edit", new { NewAgreement = agreement.AgreementNumber, variant = NewAgreement.VariantNumber });
                    //Duplicate this agreement agreement for a new agreement with...
                    case 2:
                        NewAgreement.AgreementNumber = db.Agreements.OrderBy(x => x.AgreementNumber).First().AgreementNumber + 1;
                        NewAgreement.VariantNumber = 1;
                        db.Agreements.Add(NewAgreement);
                        db.SaveChanges();
                        return RedirectToAction("Edit", new { agreementNumber = NewAgreement.AgreementNumber, variant = NewAgreement.VariantNumber });
                    //Duplicate this agreement for a new customer
                    case 3:
                        NewAgreement.RFONumbers.Clear();
                        return RedirectToAction("Add", NewAgreement);
                    //Something went wrong
                    default:
                        return RedirectToAction("Index", "Home");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult SearchAgreement()
        {
            if (Request.IsAuthenticated)
            {
                ViewBag.ListCustomerType = db.CustomerTypes.ToList();
                ViewBag.ListStatus = db.AgreementStatus.ToList();

                ViewBag.ListCSM = (from usertype in db.UserTypes
                                   from username in db.RFOUsers
                                   where usertype.UserType1 == "CSM" && usertype.UserTypeId == username.UserTypeId
                                   select username);


                return View();
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult SearchAgreement(string select, int choice)
        {
            if (Request.IsAuthenticated)
            {
                if (select != null)
                {
                    string[] part = select.Split('/');
                    switch (choice)
                    {
                        case 1:
                            //Audit
                            break;
                        case 2:
                            //Copy
                            RedirectToAction("Copy", new { agreementNumber = part[0], variant = part[1] });
                            break;
                        case 3:
                            //View
                            break;
                    }
                    return View();
                }
                else
                {
                    return RedirectToAction("SearchAgreement");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult AddAgreement()
        {
            if (Request.IsAuthenticated)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public ActionResult SelectCustomer()
        {
            if (Request.IsAuthenticated)
            {
                SearchCustomer searchModel = new SearchCustomer();
                ViewBag.CustomerTypes = db.CustomerTypes.ToArray<CustomerType>();
                return PartialView("SelectCustomer", searchModel);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        [HttpPost]
        public ActionResult SearchCustomer()
        {
            SearchCustomer searchModel = new SearchCustomer();
            if (TryUpdateModel(searchModel))
            {
                SearchCustomer[] searchResult = null;
                if (searchModel.RFONumber != null)
                {
                    var results = from rfo in db.RFONumbers.Where(r => (r.RFONumber1 == searchModel.RFONumber))
                                  join com in db.Companies
                                  on rfo.CompanyId equals com.CompanyId
                                  join csm in db.CustomerTypes
                                  on rfo.CustomerTypeId equals csm.CustomerTypeId
                                  select new SearchCustomer
                                  {
                                      RFONumber = rfo.RFONumber1,
                                      SelectedCustomerType = rfo.CustomerType,
                                      Name = com.Name,
                                      PostCode = rfo.PostCode,
                                      BusinessArea = com.BusinessArea
                                  };
                    if (results != null)
                        searchResult = results.ToArray<SearchCustomer>();
                }
                else
                {
                    var results = from rfo in db.RFONumbers.Where(r => ((searchModel.RFONumber == null || r.RFONumber1 == searchModel.RFONumber)
                                        && r.CustomerTypeId == searchModel.SelectedCustomerType.CustomerTypeId
                                        && (string.IsNullOrEmpty(searchModel.PostCode) || r.PostCode.Contains(searchModel.PostCode))))

                                  join com in db.Companies.Where(co => ((string.IsNullOrEmpty(searchModel.Name) || co.Name.Contains(searchModel.Name))
                                        && (string.IsNullOrEmpty(searchModel.BusinessArea) || co.BusinessArea.Contains(searchModel.BusinessArea))))
                                    on rfo.CompanyId equals com.CompanyId

                                  join csm in db.CustomerTypes
                                    on rfo.CustomerTypeId equals csm.CustomerTypeId
                                  select new SearchCustomer
                                  {
                                      RFONumber = rfo.RFONumber1,
                                      SelectedCustomerType = rfo.CustomerType,
                                      Name = com.Name,
                                      PostCode = rfo.PostCode,
                                      BusinessArea = com.BusinessArea
                                  };
                    if (results != null)
                        searchResult = results.ToArray<SearchCustomer>();
                }
                if (searchResult != null)
                    return PartialView("SearchCustomerResults", searchResult);
                else
                    return PartialView("SearchCustomerResults", new SearchCustomer[0]);
            }
            else
                return PartialView("SearchCustomerResults", new SearchCustomer[0]);
        }

        [HttpPost]
        public ActionResult CreateAgreement(int rfoNumber)
        {
            Agreement agrmt = new Agreement();

            var listAgrmt = db.Agreements.ToList();
            if (listAgrmt != null && listAgrmt.Count > 0)
            {
                var lastAgrmtNumber = listAgrmt.Last();
                if (lastAgrmtNumber == null)
                {
                    ViewBag.errorText = "Can not find the last Agreement.";
                    return PartialView("Warning");
                }
                agrmt.AgreementNumber = lastAgrmtNumber.AgreementNumber + 1;
            }
            else
                agrmt.AgreementNumber = 1;

            var agrmtStatus = db.AgreementStatus.Find(1);
            if (agrmtStatus == null)
            {
                ViewBag.errorText = "Can not find Status 'Draft'";
                return PartialView("Warning");
            }
            agrmt.StatusId = 1;

            var rfoObject = db.RFONumbers.Find(rfoNumber);
            if (rfoObject == null)
            {
                ViewBag.errorText = "Can not find Customer.";
                return PartialView("Warning");
            }
            agrmt.RFONumbers.Add(rfoObject);

            agrmt.VariantNumber = 1;
            agrmt.SignReceived = true;
            agrmt.SignReceived = false;
            agrmt.LastStatusUpdatedDate = DateTime.Now;
            agrmt.AuthorisedBy = User.Identity.Name;
            agrmt.AuthorisedDate = DateTime.Now;
            agrmt.CreatedBy = User.Identity.Name;
            agrmt.CreatedDate = DateTime.Now;
            agrmt.LastStatusUpdatedDate = DateTime.Now;
            agrmt.LastUpdatedBy = User.Identity.Name;

            db.Agreements.Add(agrmt);
            try
            {
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                ViewBag.errorText = "Can not create agreement.\n" + ex.Message;
                return PartialView("Warning");
            }

            ViewBag.FundingMethod = db.FundingMethods.ToArray();
            ViewBag.PaymentTo = (from syscvt in db.SYSCVTs
                                 join syscft in db.SYSCFTs.Where(s => s.XSYSCONFIGNAME == "PAYMENT TO")
                                 on syscvt.NSYSTEMCONFGID equals syscft.NSYSTEMCONFGID
                                 select syscvt)
                                .ToArray<SYSCVT>();
            ViewBag.DealerVisibility = (from syscvt in db.SYSCVTs
                                        join syscft in db.SYSCFTs.Where(s => s.XSYSCONFIGNAME == "DEALER VISIBILITY")
                                        on syscvt.NSYSTEMCONFGID equals syscft.NSYSTEMCONFGID
                                        select syscvt)
                                .ToArray<SYSCVT>();
            ViewBag.VolumeDiscountType = (from syscvt in db.SYSCVTs
                                          join syscft in db.SYSCFTs.Where(s => s.XSYSCONFIGNAME == "VOLUME DISCOUNT TYPE")
                                          on syscvt.NSYSTEMCONFGID equals syscft.NSYSTEMCONFGID
                                          select syscvt)
                                .ToArray<SYSCVT>();
            ViewBag.DiscountUnit = (from syscvt in db.SYSCVTs
                                    join syscft in db.SYSCFTs.Where(s => s.XSYSCONFIGNAME == "DISCOUNT UNIT")
                                    on syscvt.NSYSTEMCONFGID equals syscft.NSYSTEMCONFGID
                                    select syscvt)
                                .ToArray<SYSCVT>();
            ViewBag.Combinability = (from syscvt in db.SYSCVTs
                                     join syscft in db.SYSCFTs.Where(s => s.XSYSCONFIGNAME == "COMBINABILITY")
                                     on syscvt.NSYSTEMCONFGID equals syscft.NSYSTEMCONFGID
                                     select syscvt)
                                .ToArray<SYSCVT>();
            BasicDetails basicDetails = new BasicDetails();
            basicDetails.RFONumber = rfoObject.RFONumber1;
            basicDetails.CustomerName = rfoObject.RFOName;
            basicDetails.AgreementNumber = agrmt.AgreementNumber;
            basicDetails.VarriantNumber = agrmt.VariantNumber;
            return PartialView("BasicDetails", basicDetails);
        }

        public ActionResult RejectAgreement()
        {
            if (Request.IsAuthenticated)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }
    }
}